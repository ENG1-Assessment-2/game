plugins {
    id 'java'
    id 'jacoco'
    id 'checkstyle'
    id 'eclipse'
}
def checkstyleVersion = '10.4'
repositories {
  mavenCentral()
  maven { url 'https://s01.oss.sonatype.org' }
  gradlePluginPortal()
  mavenLocal()
  google()
  maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
  maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots/' }
}

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
eclipse.project.name = appName + '-core'

configurations {
  checkstyleRules
}

dependencies {
  checkstyleRules(
    "com.puppycrawl.tools:checkstyle:${checkstyleVersion}") {
    transitive = false
  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.2'  
  }
}

jacoco {
  toolVersion = "0.8.10"
}

test {
  useJUnitPlatform()  // If you are using JUnit 5
  finalizedBy jacocoTestReport  // Ensure JaCoCo report is generated after tests
}

jacocoTestReport {
  dependsOn test
  reports {
      xml.enabled true
      html.enabled true
      html.destination file("${buildDir}/reports/jacoco/test/html")  // Specify the output location of the HTML report
   }
}
checkstyle {
  toolVersion "${checkstyleVersion}"
  config = resources.text.fromArchiveEntry(configurations.checkstyleRules, 'google_checks.xml')
}
allprojects {
apply plugin: 'eclipse'
apply plugin: 'idea'
  // This allows you to "Build and run using IntelliJ IDEA", an option in IDEA's Settings.
 idea {
   module {
    outputDir file('build/classes/java/main')
    testOutputDir file('build/classes/java/test')
    }
  }
}

configure(subprojects) {
  apply plugin: 'java-library'
  sourceCompatibility = 11

  // From https://lyze.dev/2021/04/29/libGDX-Internal-Assets-List/
  // The article can be helpful when using assets.txt in your project.
  tasks.register('generateAssetList') {
    inputs.dir("${project.rootDir}/assets/")
    // projectFolder/assets
    File assetsFolder = new File("${project.rootDir}/assets/")
    // projectFolder/assets/assets.txt
    File assetsFile = new File(assetsFolder, "assets.txt")
    // delete that file in case we've already created it
    assetsFile.delete()

    // iterate through all files inside that folder
    // convert it to a relative path
    // and append it to the file assets.txt
    fileTree(assetsFolder).collect { assetsFolder.relativePath(it) }.each {
      assetsFile.append(it + "\n")
    }
  }
processResources.dependsOn 'generateAssetList'

compileJava {
  options.incremental = true
  }
}

subprojects {
  version = '$projectVersion'
  ext.appName = 'UniSim2'
  repositories {
    mavenCentral()
    maven { url 'https://s01.oss.sonatype.org' }
    // You may want to remove the following line if you have errors downloading dependencies.
    mavenLocal()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'https://jitpack.io' }
  }
}

eclipse.project.name = 'UniSim2' + '-parent'
